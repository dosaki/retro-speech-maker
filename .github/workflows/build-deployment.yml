name: build-artifacts
on:
  push:
    branches:
      - master

jobs:
  non-conditional-step-to-make-this-valid:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Github actions need a step without any conditions"

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test


  build_and_deploy:
    needs:
      - test
    timeout-minutes: 10
    if: "!contains(github.event.head_commit.message, 'NO_DEPLOY')"
    environment:
      name: production
    defaults:
      run:
        working-directory: .
    runs-on: ubuntu-latest
    env:
      DEPLOYMENT_ENV: production
      AWS_DEFAULT_REGION: eu-west-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3

      - name: Install dependencies
        run: npm install

      - name: Build library & website
        run: ./build.sh

      - name: NPM Publish
        uses: JS-DevTools/npm-publish@v3.1.1
        with:
          token: ${{ secrets.NPM_PUBLISH_TOKEN }}

      - name: Terraform Init
        run: |
          cd ./terraform
          terraform init
          terraform workspace select ${DEPLOYMENT_ENV}
          terraform get

      - name: Terraform Validate
        run: |
          cd ./terraform
          terraform validate     

      - name: Terraform Plan
        run: |
          cd ./terraform
          terraform plan \
            -var profile=pipeline \
            -var hosted_zone_id=${{ secrets.AWS_HOSTED_ZONE }} \
            -var cert_arn=${{secrets.AWS_CERT_ARN}}

      - name: Terraform Apply
        run: |
          cd ./terraform
          terraform apply -auto-approve -input=false \
            -var profile=pipeline \
            -var hosted_zone_id=${{ secrets.AWS_HOSTED_ZONE }} \
            -var cert_arn=${{secrets.AWS_CERT_ARN}}
